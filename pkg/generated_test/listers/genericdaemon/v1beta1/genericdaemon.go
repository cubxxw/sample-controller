/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "k8s.io/sample-controller/pkg/apis/genericdaemon/v1beta1"
)

// GenericdaemonLister helps list Genericdaemons.
// All objects returned here must be treated as read-only.
type GenericdaemonLister interface {
	// List lists all Genericdaemons in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Genericdaemon, err error)
	// Genericdaemons returns an object that can list and get Genericdaemons.
	Genericdaemons(namespace string) GenericdaemonNamespaceLister
	GenericdaemonListerExpansion
}

// genericdaemonLister implements the GenericdaemonLister interface.
type genericdaemonLister struct {
	indexer cache.Indexer
}

// NewGenericdaemonLister returns a new GenericdaemonLister.
func NewGenericdaemonLister(indexer cache.Indexer) GenericdaemonLister {
	return &genericdaemonLister{indexer: indexer}
}

// List lists all Genericdaemons in the indexer.
func (s *genericdaemonLister) List(selector labels.Selector) (ret []*v1beta1.Genericdaemon, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Genericdaemon))
	})
	return ret, err
}

// Genericdaemons returns an object that can list and get Genericdaemons.
func (s *genericdaemonLister) Genericdaemons(namespace string) GenericdaemonNamespaceLister {
	return genericdaemonNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GenericdaemonNamespaceLister helps list and get Genericdaemons.
// All objects returned here must be treated as read-only.
type GenericdaemonNamespaceLister interface {
	// List lists all Genericdaemons in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Genericdaemon, err error)
	// Get retrieves the Genericdaemon from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Genericdaemon, error)
	GenericdaemonNamespaceListerExpansion
}

// genericdaemonNamespaceLister implements the GenericdaemonNamespaceLister
// interface.
type genericdaemonNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Genericdaemons in the indexer for a given namespace.
func (s genericdaemonNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Genericdaemon, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Genericdaemon))
	})
	return ret, err
}

// Get retrieves the Genericdaemon from the indexer for a given namespace and name.
func (s genericdaemonNamespaceLister) Get(name string) (*v1beta1.Genericdaemon, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("genericdaemon"), name)
	}
	return obj.(*v1beta1.Genericdaemon), nil
}
