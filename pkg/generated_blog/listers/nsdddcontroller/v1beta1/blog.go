/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1beta1 "k8s.io/sample-controller/pkg/apis/nsdddcontroller/v1beta1"
)

// BlogLister helps list Blogs.
// All objects returned here must be treated as read-only.
type BlogLister interface {
	// List lists all Blogs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Blog, err error)
	// Blogs returns an object that can list and get Blogs.
	Blogs(namespace string) BlogNamespaceLister
	BlogListerExpansion
}

// blogLister implements the BlogLister interface.
type blogLister struct {
	indexer cache.Indexer
}

// NewBlogLister returns a new BlogLister.
func NewBlogLister(indexer cache.Indexer) BlogLister {
	return &blogLister{indexer: indexer}
}

// List lists all Blogs in the indexer.
func (s *blogLister) List(selector labels.Selector) (ret []*v1beta1.Blog, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Blog))
	})
	return ret, err
}

// Blogs returns an object that can list and get Blogs.
func (s *blogLister) Blogs(namespace string) BlogNamespaceLister {
	return blogNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BlogNamespaceLister helps list and get Blogs.
// All objects returned here must be treated as read-only.
type BlogNamespaceLister interface {
	// List lists all Blogs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Blog, err error)
	// Get retrieves the Blog from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Blog, error)
	BlogNamespaceListerExpansion
}

// blogNamespaceLister implements the BlogNamespaceLister
// interface.
type blogNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Blogs in the indexer for a given namespace.
func (s blogNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Blog, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Blog))
	})
	return ret, err
}

// Get retrieves the Blog from the indexer for a given namespace and name.
func (s blogNamespaceLister) Get(name string) (*v1beta1.Blog, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("blog"), name)
	}
	return obj.(*v1beta1.Blog), nil
}
